//
//  Note_Tools.swift
//  CNUIKitSDK
//
//  Created by Mac on 2021/1/6.
//

// MARK: - üçé CNUIFont

/// üçµ ÈÄÇÈÖç‰∏çÂêåÂ≠ó‰Ωì
///
/// eg: label.font = CNUIFont.PingFangSC_Medium.cn_fontSize(ofSize: 24)
///
/// Â∞ÜÂ≠ó‰ΩìÂêçÂ≠óÊõøÊç¢Êéâ PingFangSC_Medium Âç≥ÂèØ„ÄÇ
///

// MARK: - üö© Extension_UIFont_Default

/// üçµ ÈÄÇÈÖçÁ≥ªÁªüÂ≠ó‰Ωì
///
/// eg: label.font = UIFont.cn_fontSize(ofSize: 15, weight: .regular)
///
///

// MARK: - üö© Extension_UIFont_Choose

/// üçµ ÈÄÇÈÖç‰∏çÂêåÂ≠ó‰Ωì
///
/// eg: label.font = UIFont.cn_fontSize(ofName: FontName.AlNile, type: FontType.Bold, size: 12.0)
///
/// ÂÅáÂ¶ÇÂ≠ó‰ΩìÊòØ "GillSans-Bold", FontNameÂ∞±ÊòØGillSans, FontTypeÂ∞±ÊòØBold„ÄÇ
/// Â∞ÜÂ≠ó‰ΩìÂêçÂ≠óÊõøÊç¢Êéâ FontName.AlNile, Á±ªÂûãÊõøÊç¢Êéâ FontType.Bold Âç≥ÂèØ„ÄÇ
///
///

// MARK: - üçé CN_HUD
///
///
///
/// ÂØπUIViewËøõË°å‰∫ÜÊâ©Â±ïÔºö
///
/// eg:
///     self.view.showLoading()
///
/// func showLoading(animation: String = "elephantRunning") {}
/// func hideLoading() {}
/// func showTips(backgroundColor: UIColor = UIColor.black.withAlphaComponent(0.7), title: String, titleColor: UIColor = UIColor.white) {}


// MARK: - üçé CN_BaseNavController
///
/// Âü∫Á°ÄÂØºËà™Ê†è
///

/// üçµ ÂØºËà™Ê†èËøîÂõû‰∫ã‰ª∂:
///
/// eg:
///     (self.navigationController as? CN_BaseNavController)!.cn_backBlock = {
///         self.navigationController?.popToRootViewController(animated: true)
///     }
///
/// (self.navigationController as? CN_BaseNavController)!.cn_backBlock = {}

// MARK: - üçé CN_BaseController
///
/// Âü∫Á°ÄÊéßÂà∂Âô®
///

/// üçµ ÂØºËà™Ê†èËÆæÁΩÆ:
///
/// eg:
///
/// public var cn_hideNavigationBar: Bool? = nil {}
/// public var cn_backgroundColor:   UIColor? = nil {}
/// public var cn_hidesNavigationBarHairline: Bool? = nil {}
/// public var cn_barTintColor: UIColor? {}
/// public var cn_barTintImage: UIImage? {}
/// public var cn_barTitleColor: UIColor? {}
/// public var cn_barTitleFont: UIFont? {}
/// public var cn_barButtonItemTitleColor: UIColor? {}
/// public var cn_barButtonItemTitleFont : UIFont? {}
/// public var backIndicatorImage: UIImage? {}
///



// MARK: - üçé CN_Location

/// üçµ ÂÆûÊó∂Ëé∑ÂèñÁªèÁ∫¨Â∫¶
///
/// eg:
///     CN_Location.shared.startLocation(Gaode_apiKey: "ba93c434e092aaac88ce8899406ec693", controller: self)
///     CN_Location.shared.updateCoordinateBlock = { (long, lat) -> Void in
///
///     }
///
/// public var updateCoordinateBlock: ((_ longitude: String, _ latitude: String)->())?

/// üçµ ÂÆûÊó∂Ëé∑ÂèñËØ¶ÁªÜÂú∞ÂùÄ
///
/// eg:
///     CN_Location.shared.startLocation(Gaode_apiKey: "ba93c434e092aaac88ce8899406ec693", controller: self)
///     CN_Location.shared.updateAddressBlock = { (address) -> Void in
///
///     }
///
/// public var updateAddressBlock: ((_ address: String)->())?

/// üçµ ÂºÄÂßãÂÆö‰Ωç
///
/// eg:
///     CN_Location.shared.startLocation(Gaode_apiKey: "ba93c434e092aaac88ce8899406ec693", controller: self)
///
/// public func startLocation(Gaode_apiKey: String, controller: UIViewController) {}

/// üçµ ÂÅúÊ≠¢ÂÆö‰Ωç
///
/// eg:
///     CN_Location.shared.stopLocation()
///
/// public func stopLocation() {}


// MARK: - üçé CN_Json

/// üçµ JSONStringËΩ¨Â≠óÂÖ∏
///
/// eg:
///     print(CN_Json.getDictFromJsonStr(JsonStr: String))
///
/// public static func getDictFromJsonStr(JsonStr: String) -> Dictionary {}

/// üçµ StringËΩ¨JSONString
///
/// eg:
///     print(CN_Json.getJsonStrFromStr(JsonStr: String))
///
/// public static func getJsonStrFromStr(str: String) -> String {}

/// üçµ DictionaryËΩ¨JSONString
///
/// eg:
///     print(CN_Json.getJsonStrFromDict(JsonStr: String))
///
/// public static func getJsonStrFromDict(dict: Dictionary) -> String {}

/// üçµ ArrayËΩ¨JSONString
///
/// eg:
///     print(CN_Json.getJsonStrFromArray(JsonStr: String))
///
/// public static func getJsonStrFromArray(array: Array<Any>) -> String {}

// MARK: - üçé CN_VideoHelper

/// üçµ ÊäìÂèñËßÜÈ¢ë‰∏≠ÁöÑÊà™ÂõæÔºåÂèØ‰ª•‰Ωú‰∏∫Â∞ÅÈù¢
///
/// eg:
///     CN_VideoHelper.thumbImageFrom(url: URL(string: singleMaterialModel.upload_file[0])!) { (image) in
///         imageView.image = image
///     }
///
/// public class func thumbImageFrom(url: URL, image: @escaping (UIImage?) -> ()) {}

// MARK: - üçé CN_ShowHelper

/// üçµ ÊîæÂ§ßÂ±ïÁ§∫ÂõæÁâá
///
/// eg:
///     CN_ShowHelper.show(imageView: self.doorImg)
///
/// static func show(imageView: UIImageView) {}


// MARK: - üçé CN_PopupImageView

/// üçµ ‰∏ÄÂº†ÂõæÁâáÂç†ÊçÆÊï¥‰∏™Â±èÂπï, ÁÇπÂáªÂõæÁâáËøîÂõû
///
/// ÂèØ‰ª•ËÆæÁΩÆ: ÁΩëÁªúÂõæÁâá„ÄÅÂõæÁâáÁöÑsize„ÄÅÈªòËÆ§ÂõæÁâá
/// eg:
///    let ruleView = CN_PopupImageView()
///    ruleView.url = "......"
///    ruleView.placeHolder = UIImage(named: "MyCenter_VipRemind")
///    ruleView.cgSize = CGSize(width: cn_scale(205.0), height: cn_scale(236.0))
///    ruleView.show_Event()
///
/// public func show_Event() {}

// MARK: - üçé CNUILabel

/// üçµ ÂàùÂßãÂåñÂ§öÁßçÊ†∑ÂºèÁöÑlabel
///
/// eg: private let realPrice: CNUILabel = {
///         let label = CNUILabel(labelType: .moreFont)
///         label.labelText = "¬•NA"
///         label.textColor = UIColor(hexString: "#FF7531")
///         label.font = UIFont.cn_fontSize(ofSize: 20)
///         label.fontStartLocation = 0
///         label.fontLength = 1
///         label.fontValue = UIFont.cn_fontSize(ofSize: 20)
///         return label
///     }()
///
/// .middleLine
///  >> labelText„ÄÅcolorLine
///
/// .bottomLine
///  >> labelText„ÄÅcolorLine
///
/// .moreColor
///  >> labelText„ÄÅcolorStartLocation„ÄÅcolorLength„ÄÅcolorValue
///
/// .moreFont
///  >> labelText„ÄÅfontStartLocation„ÄÅfontLength„ÄÅfontValue
///
/// .moreColorAndFont
///  >> labelText„ÄÅcolorStartLocation„ÄÅcolorLength„ÄÅcolorValue„ÄÅfontStartLocation„ÄÅfontLength„ÄÅfontValue
///
/// public init(frame: CGRect = .zero, labelType: CNUILabelType) {}

// MARK: - üçé CNUILoadingLabel

/// üçµ ÁÇπÂáªlabelÂä†ËΩΩËΩ¨ÂúàÂä®Áîª
///
/// eg:
///     let label = CNUILoadingLabel.init(background: UIColor.white, text: "xxx", textColor: UIColor.flatRed(), font:   UIFont.cn_fontSize(ofSize: 14), alignment: .center, numberOfLines: 1, strokeColor: UIColor.red)
///
///     loginLabel.click = { () -> Void in
///         self.login_Event()
///     }
///
///     label.stop = true
///
/// public init(background: UIColor = .white, text: String, textColor: UIColor, font: UIFont, alignment: NSTextAlignment = .left, numberOfLines: Int = 1, lineSpacing: CGFloat? = nil, strokeColor: UIColor? = UIColor.white) {}
///
/// public var clickBlock: (()->())?  ÁÇπÂáªËß¶Âèë‰∫ã‰ª∂
/// public var stop: Bool? {}  ÊéßÂà∂ÂÅúÊ≠¢Ôºåstop == trueÂ∞±‰ºöÂÅúÊ≠¢

// MARK: - üçé CNUIButton

/// üçµ ÂàùÂßãÂåñÂ§öÁßçÊ†∑ÂºèÁöÑ UIButton
///
/// eg: private let banner: CNUIButton = {
///         let btn = CNUIButton()
///         btn.btnType = .leftImgRightTitle
///         btn.spacing = 6
///         btn.setImage(UIImage(named: "Banner_Login")!, for: .normal)
///         btn.setTitle("xxx", for: .normal)
///         btn.setTitleColor(UIColor.Color_LogoTitleColor, for: .normal)
///         btn.titleLabel?.font = UIFont.cn_fontSize(ofSize: 24)
///         btn.isEnabled = false
///         return btn
///     }()
///
/// public var btnType = CNUIButtonType.leftImgRightTitle
/// public var spacing: CGFloat = 0
///
/// public enum CNUIButtonType {
///     case leftImgRightTitle
///     case leftTitleRightImg
///     case topTitleBottomImg
///     case topImgBottomTitle
/// }

// MARK: - üçé CNUIButton_ImageUrl

/// üçµ ÂàùÂßãÂåñÂ§öÁßçÊ†∑ÂºèÁöÑ UIButton(Ëá™ÂÆö‰πâ‰∫ÜView)
///
/// eg: private let btn: CNUIButton_ImageUrl = {
///         let btn = CNUIButton_ImageUrl()
///         btn.btnType = .leftImgRightTitle
///         btn.spacing = 6
///         return btn
///     }()
///
/// eg: btn.setImageUrl_CN(imageUrl: String, placeImage: UIImage? = nil, state: UIControl.State = .normal)
///
/// public var btnType = CNUIButton_ImageUrlType.leftImgRightTitle
/// public var spacing: CGFloat = 0
///
/// public enum CNUIButton_ImageUrlType {
///     case leftImgRightTitle
///     case leftTitleRightImg
///     case topTitleBottomImg
///     case topImgBottomTitle
/// }

// MARK: - üçé CNUITextField

/// üçµ Ê†πÊçÆË¶ÅËæìÂÖ•ÁöÑÂÜÖÂÆπÁ±ªÂûã
///
/// eg: private let texField: CNUITextField = {
///         let texF = CNUITextField(text: String, textColor: UIColor, textFont: UIFont, placeholderText: String?, placeholderColor: UIColor?, placeholderFont: UIFont?, cursorColor: UIColor?, textContentType: UITextContentType?, keyboardType: UIKeyboardType, returnKeyType: UIReturnKeyType, alignment: NSTextAlignment)
///
///         texF.inputType = .money
///     }()
///
/// eg: texField.endInputBlock = { (text) -> Void in ...}
///
/// public enum CNUITextFieldInputType {
///     case normal
///     case money
///     case money_leftView
///     case phone
/// }
///
/// public var endInputBlock: ((String)->())?
///
/// public convenience init(text: String, textColor: UIColor, textFont: UIFont, placeholderText: String?, placeholderColor: UIColor?, placeholderFont: UIFont?, cursorColor: UIColor?, textContentType: UITextContentType?, keyboardType: UIKeyboardType, returnKeyType: UIReturnKeyType, alignment: NSTextAlignment) {}

// MARK: - üçé CNUISearchBar

/// üçµ ÂàùÂßãÂåñËá™ÂÆö‰πâÊ†∑ÂºèÁöÑ UISearchBar
///
/// eg: let sear = CNUISearchBar(backgroundColor: UIColor?, backgroundImage: UIImage?, leftImage: String, InputBackgroundImage: UIImage?, InputBackgroundColor: UIColor, placeholderText: String, placeholderColor: String, placeholderFont: UIFont, InputFont: UIFont, InputTextColor: UIColor, tfCorner: CGFloat, tfBorderWidth: CGFloat, tfBorderColor: UIColor, tfHeight: CGFloat, cursorColor: UIColor?, iconPosition: UIOffset, textPosition: UIOffset)
///
/// eg: sear.searchBarBeginEditingBlock = { (text) -> Void in ...}
/// eg: sear.searchBarSearchClickBlock = { (text) -> Void in ...}
///
/// public var searchBarBeginEditingBlock: ((String) -> Void)?
/// public var searchBarSearchClickBlock: ((String) -> Void)?
///
/// public convenience init(backgroundColor: UIColor?, backgroundImage: UIImage?, leftImage: String, InputBackgroundImage: UIImage?, InputBackgroundColor: UIColor, placeholderText: String, placeholderColor: String, placeholderFont: UIFont, InputFont: UIFont, InputTextColor: UIColor,  tfCorner: CGFloat, tfBorderWidth: CGFloat, tfBorderColor: UIColor, tfHeight: CGFloat, cursorColor: UIColor?, iconPosition: UIOffset, textPosition: UIOffset) {}

